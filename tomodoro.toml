[Timer]
  # widget collor, should be a string
  color = '#000000'
  # widget background color
  background_color = "#FAFFAA"
  # widget width, can be an integer or a float between 0 and 1
  width = 1.0
  # widget height, can be an integer or a float between 0 and 1
  height = 0.2
  # postion of the widget in x direction
  # can be an integer or a float between 0 and 1
  x = 0.0
  # postion of the widget in y direction
  # can be an integer or a float between 0 and 1
  # need fixing for the floating point
  y = 0.3
  # duratoin of the focus cycle in second, should be an integer
  # the duration of the focus state
  focus_duration = 3000
  # duratoin of the cycle in seconds, should be an integer
  # the duration of the resting state
  rest_duration = 300
  # number of cycles, defaults to infinite and if not declared implicitly
  max_cycles = 6
  # the number of the timer starts from
  cycles = 0
  # path of the audio that will run when the focus phase starts
  focus_alarm = "assets/hotel-bell-ding-1-174457.mp3"
  # path of the audio that will run when the rest phase starts
  rest_alarm = "assets/old-style-door-bell-101191.mp3"

[Button]
  # widget collor, should be a string
  color= "#BBBF2A"
  # widget background color
  background_color = "#B54929"
  # widget width, can be an integer or a float between 0 and 1
  width = 0.3
  # widget height, can be an integer or a float between 0 and 1
  height = 0.2
  # postion of the widget in x direction
  # can be an integer or a float between 0 and 1
  x = 0.35
  # postion of the widget in y direction
  # can be an integer or a float between 0 and 1
  y = 0.60
  # displayed banner on the focus state
  focus_banner = "focus"
  # displayed banner on the rest state
  rest_banner = "rest"
  # displayed banner on the pausing state
  pause_banner = "paused"

[Hook]
# enables using hooks, default to false
enable = false
# hook at the focus phase
[Hook.Focus]
# enables using hooks on focus phase, defaults to false
enable = true
# time when the hook will run, either "start" or "end"
# for the start and the end of the phase respectively
# defaults to "end"
after = "end"
# path to the hook, the path should be a valid executable bash file
path = "path/to/file.sh"
[Hook.Rest]
# enables using hooks on rest phase, default to false
enable = false
# time when the hook will run, either "start" or "end"
# for the start and the end of the phase respectively
# defaults to "end"
after = "start"
# path to the hook, the path should be a valid executable bash file
path = "path/to/file.sh"
